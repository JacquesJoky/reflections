What happens when you initialize a repository? Why do you need to do it?

	An empty Git repository has been initialized in a .git directory located in the directory
	where I initialized the repository.

How is the staging area different from the working directory and the repository? What value do you think it offers?

	It is a transitory area where you prepare your files to be saved via commits.

How can you use the staging area to make sure you have one commit per logical change?

	First, by git add <file>, add the modified files in the staging area.
	Then, by git diff --staged, check the differences between the staging area and the last commit.

What are some situations when branches would be helpful in keeping your history organized? How would branches help?

	Branches would be helpful if different experimentations are required on a project from a same starting point. It allows deveopers to go in different directions.

How do the diagrams help you visualize the branch structure?

	The commit history diagram lists all the commits and shows where the commits history branches off.

What is the result of merging two branches together? Why do we represent it in the diagram the way we do?

	When we merge two branches, Git compares three commits to get a new one: the tips of the two branches and the commit where the commits history braanched off. Git will then know which lines were added and/or removed in order to keep and/or delete them in the new merged commit.

What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges manually?

	Automatic merging may save time, if there is a lot of lines of code. But manual merging lets the user have more control on what is to be merged.